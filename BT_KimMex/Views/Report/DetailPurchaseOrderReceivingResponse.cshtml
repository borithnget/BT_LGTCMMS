<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Demo</title>

    <script type="text/javascript" src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.10.23/js/jquery.dataTables.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.23/css/jquery.dataTables.min.css" />

    <link rel="stylesheet" type="text/css" href="https://datatables.net/media/css/site-examples.css">

    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/1.6.5/css/buttons.dataTables.min.css" />
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/1.6.5/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/1.6.5/js/buttons.html5.min.js"></script>

</head>

<body>

    <div style="margin: 20px;">

        <table id="example" class="display nowrap" width="100%">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Office</th>
                    <th>Age</th>
                    <th>Start date</th>
                    <th>Salary</th>
                </tr>
            </thead>

            <tfoot>
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Office</th>
                    <th>Age</th>
                    <th>Start date</th>
                    <th>Salary</th>
                </tr>
            </tfoot>

            <tbody>
                <tr>
                    <td>Tiger Nixon</td>
                    <td>System Architect</td>
                    <td>Edinburgh</td>
                    <td>61</td>
                    <td>2011/04/25</td>
                    <td>$3,120</td>
                </tr>
                <tr>
                    <td>Garrett Winters</td>
                    <td>Director</td>
                    <td>Edinburgh</td>
                    <td>63</td>
                    <td>2011/07/25</td>
                    <td>$5,300</td>
                </tr>
                <tr>
                    <td>Ashton Cox</td>
                    <td>Technical Author</td>
                    <td>San Francisco</td>
                    <td>66</td>
                    <td>2009/01/12</td>
                    <td>$4,800</td>
                </tr>
            </tbody>
        </table>
        <hr />
        <table id="example2" class="display nowrap" width="100%" data-rowonetitle="My Sheet2" data-sheetname="Summary2">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Notes</th>
                </tr>
            </thead>

            <tfoot>
                <tr>
                    <th>Name</th>
                    <th>Notes</th>
                </tr>
            </tfoot>

            <tbody>
                <tr>
                    <td>Big Column Test 1</td>
                    <td>Notes 1</td>
                </tr>
                <tr>
                    <td>Test 2</td>
                    <td>Notes 2</td>
                </tr>
            </tbody>
        </table>
        <hr />
        <table id="example3" class="display nowrap" width="100%" data-rowonetitle="My Sheet3" data-sheetname="Summary3">
            <thead>
                <tr>
                    <th>TABLE 3</th>
                    <th>Notes</th>
                </tr>
            </thead>

            <tfoot>
                <tr>
                    <th>Comments </th>
                    <th>Notes</th>
                </tr>
            </tfoot>

            <tbody>
                <tr>
                    <td>Test 1</td>
                    <td>Notes 1</td>
                </tr>
                <tr>
                    <td>Test 2</td>
                    <td>Notes 2</td>
                </tr>
            </tbody>
        </table>
        <table id="example4" class="display nowrap" width="100%" data-rowonetitle="My Sheet4" data-sheetname="Summary4">
            <thead>
                <tr>
                    <th>TABLE 4</th>
                    <th>Notes</th>
                </tr>
            </thead>

            <tfoot>
                <tr>
                    <th>Comments </th>
                    <th>Notes</th>
                </tr>
            </tfoot>

            <tbody>
                <tr>
                    <td>Test 1</td>
                    <td>Notes 1</td>
                </tr>
                <tr>
                    <td>Test 2</td>
                    <td>Notes 2</td>
                </tr>
            </tbody>
        </table>
        <table id="example5" class="display nowrap" width="100%" data-rowonetitle="My Sheet5" data-sheetname="Summary5">
            <thead>
                <tr>
                    <th>TABLE 5</th>
                    <th>Notes</th>
                </tr>
            </thead>

            <tfoot>
                <tr>
                    <th>Comments </th>
                    <th>Notes</th>
                </tr>
            </tfoot>

            <tbody>
                <tr>
                    <td>Test 1</td>
                    <td>Notes 1</td>
                </tr>
                <tr>
                    <td>Test 2</td>
                    <td>Notes 2</td>
                </tr>
            </tbody>
        </table>
        <table id="example6" class="display nowrap" width="100%" data-rowonetitle="My Sheet6" data-sheetname="Summary6">
            <thead>
                <tr>
                    <th>TABLE 6</th>
                    <th>Notes</th>
                </tr>
            </thead>

            <tfoot>
                <tr>
                    <th>Comments </th>
                    <th>Notes</th>
                </tr>
            </tfoot>

            <tbody>
                <tr>
                    <td>Test 1</td>
                    <td>Notes 1</td>
                </tr>
                <tr>
                    <td>Test 2</td>
                    <td>Notes 2</td>
                </tr>
            </tbody>
        </table>

    </div>

    <script>

        //
        // Based on example from:
        // http://live.datatables.net/kuyayeto/9/edit
        // which in turn is based on example from:
        // https://datatables.net/forums/discussion/49457
        // modified by me to process additional tables in a loop.
        //
        $(document).ready(function () {

            function getHeaderNames(table) {
                // Gets header names.
                //params:
                //  table: table ID.
                //Returns:
                //  Array of column header names.

                var header = $(table).DataTable().columns().header().toArray();

                var names = [];
                header.forEach(function (th) {
                    names.push($(th).html());
                });

                return names;
            }

            function buildCols(data) {
                // Builds cols XML.
                //To do: define widths for each column.
                //Params:
                //  data: row data.
                //Returns:
                //  String of XML formatted column widths.

                var cols = '<cols>';

                for (i = 0; i < data.length; i++) {
                    colNum = i + 1;
                    cols += '<col min="' + colNum + '" max="' + colNum + '" width="20" customWidth="1"/>';
                }

                cols += '</cols>';

                return cols;
            }

            function buildRow(data, rowNum, styleNum) {
                // Builds row XML.
                //Params:
                //  data: Row data.
                //  rowNum: Excel row number.
                //  styleNum: style number or empty string for no style.
                //Returns:
                //  String of XML formatted row.

                var style = styleNum ? ' s="' + styleNum + '"' : '';

                var row = '<row r="' + rowNum + '">';

                for (i = 0; i < data.length; i++) {
                    colNum = (i + 10).toString(36).toUpperCase();  // Convert to alpha

                    var cr = colNum + rowNum;

                    row += '<c t="inlineStr" r="' + cr + '"' + style + '>' +
                        '<is>' +
                        '<t>' + data[i] + '</t>' +
                        '</is>' +
                        '</c>';
                }

                row += '</row>';

                return row;
            }

            function getTableData(table, title) {
                // Processes Datatable row data to build sheet.
                //Params:
                //  table: table ID.
                //  title: Title displayed at top of SS or empty str for no title.
                //Returns:
                //  String of XML formatted worksheet.

                var header = getHeaderNames(table);
                var table = $(table).DataTable();
                var rowNum = 1;
                var mergeCells = '';
                var ws = '';

                ws += buildCols(header);
                ws += '<sheetData>';

                if (title.length > 0) {
                    ws += buildRow([title], rowNum, 51);
                    rowNum++;

                    mergeCol = ((header.length - 1) + 10).toString(36).toUpperCase();

                    mergeCells = '<mergeCells count="1">' +
                        '<mergeCell ref="A1:' + mergeCol + '1"/>' +
                        '</mergeCells>';
                }

                ws += buildRow(header, rowNum, 2);
                rowNum++;

                // Loop through each row to append to sheet.
                table.rows().every(function (rowIdx, tableLoop, rowLoop) {
                    var data = this.data();

                    // If data is object based, then it needs to be converted
                    // to an array before sending to buildRow()
                    ws += buildRow(data, rowNum, '');

                    rowNum++;
                });

                ws += '</sheetData>' + mergeCells;

                return ws;

            }

            function setSheetName(xlsx, name) {
                // Changes tab title for sheet.
                //Params:
                //  xlsx: xlxs worksheet object.
                //  name: name for sheet.

                if (name.length > 0) {
                    var source = xlsx.xl['workbook.xml'].getElementsByTagName('sheet')[0];
                    source.setAttribute('name', name);
                }
            }

            function addSheet(xlsx, table, title, name, sheetId) {
                //Clones sheet from Sheet1 to build new sheet.
                //Params:
                //  xlsx: xlsx object.
                //  table: table ID.
                //  title: Title for top row or blank if no title.
                //  name: Name of new sheet.
                //  sheetId: string containing sheetId for new sheet.
                //Returns:
                //  Updated sheet object.

                //Add sheet2 to [Content_Types].xml => <Types>
                //============================================
                var source = xlsx['[Content_Types].xml'].getElementsByTagName('Override')[1];
                var clone = source.cloneNode(true);
                clone.setAttribute('PartName', '/xl/worksheets/sheet' + sheetId + '.xml');
                xlsx['[Content_Types].xml'].getElementsByTagName('Types')[0].appendChild(clone);

                //Add sheet relationship to xl/_rels/workbook.xml.rels => Relationships
                //=====================================================================
                var source = xlsx.xl._rels['workbook.xml.rels'].getElementsByTagName('Relationship')[0];
                var clone = source.cloneNode(true);
                clone.setAttribute('Id', 'rId' + sheetId + 1);
                clone.setAttribute('Target', 'worksheets/sheet' + sheetId + '.xml');
                xlsx.xl._rels['workbook.xml.rels'].getElementsByTagName('Relationships')[0].appendChild(clone);

                //Add second sheet to xl/workbook.xml => <workbook><sheets>
                //=========================================================
                var source = xlsx.xl['workbook.xml'].getElementsByTagName('sheet')[0];
                var clone = source.cloneNode(true);
                clone.setAttribute('name', name);
                clone.setAttribute('sheetId', sheetId);
                clone.setAttribute('r:id', 'rId' + sheetId + 1);
                xlsx.xl['workbook.xml'].getElementsByTagName('sheets')[0].appendChild(clone);

                //Add sheet2.xml to xl/worksheets
                //===============================
                var newSheet = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' +
                    '<worksheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac" mc:Ignorable="x14ac">' +
                    getTableData(table, title) +

                    '</worksheet>';

                xlsx.xl.worksheets['sheet' + sheetId + '.xml'] = $.parseXML(newSheet);

            }

            var table = $('#example').DataTable({
                dom: 'Bftrip',
                buttons: [
                    {
                        extend: 'excelHtml5',
                        text: 'Excel',
                        customize: function (xlsx) {
                            setSheetName(xlsx, 'Employees');

                            // process additional DataTables in the web page:
                            $('table').each(function (index) {
                                if (index > 0) {
                                    var tableID = '#' + $(this).attr('id');
                                    var rowOneTitle = $(this).attr('data-rowonetitle');
                                    var sheetName = $(this).attr('data-sheetname');
                                    var sheetID = index + 1;
                                    addSheet(xlsx, tableID, rowOneTitle, sheetName, sheetID);
                                }
                            });

                        }

                    }
                ]

            });

            $('#example2').DataTable();
            $('#example3').DataTable();
            $('#example4').DataTable();
            $('#example5').DataTable();
            $('#example6').DataTable();

        });
    </script>

</body>
</html>

@*@model IEnumerable<BT_KimMex.Models.DetailPOReceivingReportResponseModel>
    @using BT_KimMex.Class;
    @using BT_KimMex.Models;
    @{
        Layout = null;
    }

    <!DOCTYPE html>

    <html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <title>Detail PurchaseOrder Receiving Response</title>
    </head>
    <body>
        <table style=" border-collapse: collapse; width:100%;" id="table1">
            <tr>
                <td style="text-align: center; font-family: 'Kantumruy Pro'; border: thin solid black; vertical-align:middle !important;"></td>
                <td style="text-align: center; font-family: 'Kantumruy Pro'; border: thin solid black; vertical-align:middle !important;">Receive<br />Date</td>
                <td style="text-align: center; font-family: 'Kantumruy Pro'; border: thin solid black; vertical-align:middle !important;">PO #</td>
                <td style="text-align: center; font-family: 'Kantumruy Pro'; border: thin solid black; vertical-align:middle !important;">Warehouse</td>
                <td style="text-align: center; font-family: 'Kantumruy Pro'; border: thin solid black; vertical-align:middle !important;">Item<br />Code</td>
                <td style="text-align: center; font-family: 'Kantumruy Pro'; border: thin solid black; vertical-align:middle !important;">Description</td>
                <td style="text-align: center; font-family: 'Kantumruy Pro'; border: thin solid black; vertical-align:middle !important;">Unit</td>
                <td style="text-align: center; font-family: 'Kantumruy Pro'; border: thin solid black; vertical-align:middle !important;"># Item<br />Receive</td>
                <td style="text-align: center; font-family: 'Kantumruy Pro'; border: thin solid black; vertical-align:middle !important;">Order<br />Qty</td>
                <td style="text-align: center; font-family: 'Kantumruy Pro'; border: thin solid black; vertical-align:middle !important;">Received <br />Qty</td>
                <td style="text-align: center; font-family: 'Kantumruy Pro'; border: thin solid black; vertical-align:middle !important;">Remain<br />Qty</td>
            </tr>
            @{
                foreach (var obj in Model.Select((value, i) => new { i, value }))
                {
                    var grn = obj.value;
                    foreach (var hisObj in grn.receivedHistories.Select((value, i) => new { i, value }))
                    {
                        var his = hisObj.value;
                        var noReceived = string.Format("{0} /IRe", hisObj.i + 1);

                        foreach (var rs in obj.value.poReport.items.Select((value, i) => new { i, value }))
                        {
                            var item = rs.value;
                            var countingNumber = rs.i == 0 && hisObj.i == 0 ? (obj.i + 1).ToString() : string.Empty;
                            var border = rs.i == obj.value.poReport.items.Count() - 1 && hisObj.i==grn.receivedHistories.Count()-1 ? "border-bottom:thin dotted black;" : string.Empty;

                            //var receivedQty = item.purd.po_quantity - item.purd.remain_quantity;
                            var received = his.inventories.Where(s => string.Compare(s.product_id, item.prod.product_id) == 0).FirstOrDefault();
                            var receivedQty = received == null ? 0 : received.in_quantity;

                            decimal reaminQty = 0;
                            if (hisObj.i == 0)
                            {
                                reaminQty = Convert.ToDecimal(item.purd.po_quantity - Convert.ToDecimal(receivedQty));
                            }
                            else if (hisObj.i == grn.receivedHistories.Count() - 1)
                            {
                                reaminQty = Convert.ToDecimal(item.purd.remain_quantity);
                            }
                            else
                            {
                                var receivedLess = grn.receivedHistories.Where(s => s.created_date <= his.created_date).ToList();
                                decimal totalCurrentReceived = 0;
                                foreach (var rl in receivedLess)
                                {
                                    var re_rl = rl.inventories.Where(s => string.Compare(s.product_id, item.prod.product_id) == 0).FirstOrDefault();
                                    totalCurrentReceived = totalCurrentReceived + Convert.ToDecimal((re_rl == null ? 0 : re_rl.in_quantity));
                                }
                                reaminQty = Convert.ToDecimal(item.purd.po_quantity - totalCurrentReceived);
                            }

                            string warehouse = his.inventories.FirstOrDefault().warehouseName;

                            <tr>
                                <td style="@border text-align: center; font-family: 'Kantumruy Pro'; vertical-align:middle !important; ">@countingNumber</td>
                                <td style="@border text-align: center; font-family: 'Kantumruy Pro'; vertical-align:middle !important;">@CommonClass.ToLocalTime(Convert.ToDateTime(his.created_date)).ToString("dd/MM/yyyy")</td>
                                <td style="@border text-align: center; font-family: 'Kantumruy Pro'; vertical-align:middle !important;">@obj.value.poReport.po_report_number</td>
                                <td style="@border text-align: left; font-family: 'Kantumruy Pro'; vertical-align:middle !important;">@warehouse</td>
                                <td style="@border text-align: center; font-family: 'Kantumruy Pro'; vertical-align:middle !important;">@item.prod.product_code</td>
                                <td style="@border text-align: left; font-family: 'Kantumruy Pro'; vertical-align:middle !important;">@item.prod.product_name</td>
                                <td style="@border text-align: left; font-family: 'Kantumruy Pro'; vertical-align:middle !important;">@item.unit.Name</td>
                                <td style="@border text-align: center; font-family: 'Kantumruy Pro'; vertical-align:middle !important;">@noReceived</td>
                                <td style="@border text-align: center; font-family: 'Kantumruy Pro'; vertical-align:middle !important;">@Convert.ToDecimal(item.purd.po_quantity).ToString("0.####")</td>
                                <td style="@border text-align: center; font-family: 'Kantumruy Pro'; vertical-align:middle !important;">@Convert.ToDecimal(receivedQty).ToString("0.####")</td>
                                <td style="@border text-align: center; font-family: 'Kantumruy Pro'; vertical-align:middle !important;">@Convert.ToDecimal(reaminQty).ToString("0.####")</td>
                            </tr>


                        }

                    }


                }
            }
        </table>

        <script type="text/javascript" src="~/Scripts/jquery-1.12.4.min.js"></script>
        <script type="text/javascript" src="~/Assets/plugins/TableExport/js/xlsx.core.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.0/FileSaver.min.js" integrity="sha512-csNcFYJniKjJxRWRV1R7fvnXrycHP6qDR21mgz1ZP55xY5d+aHLfo9/FcGDQLfn2IfngbAHd8LdfsagcCqgTcQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.15.6/shim.min.js"></script>
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.15.6/cpexcel.js"></script>
        <script type="text/javascript" src="~/Assets/plugins/TableExport/js/tableexport.min.js"></script>
        <script type="text/javascript" src="~/Scripts/jQuery.print.min.js"></script>
        <script type="text/javascript">
            function exportTableToExcel(tableId, filename) {
                let dataType = 'application/vnd.ms-excel';
                let extension = '.xls';

                let base64 = function (s) {
                    //return window.btoa(unescape(encodeURIComponent(s)))
                    //return window.btoa(unescape(escape(s)))
                    //return window.btoa(escape(s))

                    try {
                        return window.btoa(unescape(escape(s)));
                    }
                    catch (err) {
                        return window.btoa(unescape(encodeURIComponent(s)));
                    }

                };

                let template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>';
                let render = function (template, content) {
                    return template.replace(/{(\w+)}/g, function (m, p) { return content[p]; });
                };

                let tableElement = document.getElementById(tableId);

                let tableExcel = render(template, {
                    worksheet: filename,
                    table: tableElement.innerHTML.normalize('NFD').replace("–", "-")
                });
                //console.log(tableExcel);

                filename = filename + extension;

                if (navigator.msSaveOrOpenBlob) {
                    let blob = new Blob(
                        ['\ufeff', tableExcel],
                        { type: dataType }
                    );

                    navigator.msSaveOrOpenBlob(blob, filename);
                } else {
                    let downloadLink = document.createElement("a");

                    document.body.appendChild(downloadLink);

                    downloadLink.href = 'data:' + dataType + ';base64,' + base64(tableExcel);

                    downloadLink.download = filename;

                    downloadLink.click();
                }
            }



            //tableToExcel();

            $(function () {
                $("input[name='GridHtml']").val($("#myform").html());
                //$("#my-form").submit();


                exportTableToExcel('table1', 'Detail PO Receiving Report ' + new Date());

                if (navigator.userAgent.indexOf("Firefox") > 0) {
                    window.setTimeout(function () { window.history.back(); }, 1000);
                } else {
                    //window.top.close();
                    window.history.back();
                }

            });
        </script>
    </body>
    </html>*@

