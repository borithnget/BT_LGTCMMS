@model BT_KimMex.Models.StockDamageViewModel
@using System.Text.RegularExpressions;
@{
    ViewBag.Title = "Edit";
}
@*<link href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.1/themes/base/jquery-ui.css" rel="stylesheet" type="text/css" />*@
<style type="text/css">
    #stockDamageTable tr td:nth-child(12), td:nth-child(9), td:nth-child(10), td:nth-child(11), td:nth-child(6),td:nth-child(5) {
        text-align: center !important;
        vertical-align: middle !important;
    }
    #stockDamageTable tr td{
        /*text-align:center !important;*/
        vertical-align:middle !important;
    }
</style>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h3 class="title">Edit Stock Damage</h3>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.stock_damage_id)

        <div class="form-group">
            @Html.LabelFor(model => model.stock_damage_number, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.Label(Convert.ToDateTime(Model.created_date).ToString("dd/MM/yyyy"),new {@class="col-md-10" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.created_date, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.Label(Model.stock_damage_number, new { @class = "col-md-10", id = "stock_damage_number" })
        </div>

        <div class="row" style="margin:0 !important;">
            <table class="table table-bordered" id="stockDamageTable">
                <thead>
                    <tr>
                        <th>No.</th>
                        <th>Code</th>
                        <th>Description</th>
                        <th>From Warehouse</th>
                        <th>Stock Balance</th>
                        <th>Damage QTY</th>
                        <th>Unit</th>
                        <th>Invoice No.</th>
                        <th>Invoice Date</th>
                        <th>Remark</th>
                        <th></th>
                        <th></th>
                        @*<th></th>
                        <th></th>*@
                    </tr>
                </thead>
                <tbody>
                    @{ 
                        var itemDamages = Model.inventoryDetails;
                        int count = 1;
                        foreach (var item in itemDamages)
                        {
                            string damageQty = string.Format("{0:G29}", decimal.Parse(item.quantity.ToString()));
                            string stockBalance = string.Format("{0:G29}", decimal.Parse(item.stock_balance.ToString()));
                            string iId = "AA" + count;
                                <tr id="@iId">
                                    <td>@count</td>
                                    <td><input type='hidden' class='item-id' value="@item.inventory_item_id" /> <input type="text" class="form-control item-code" value="@item.itemCode" id="@iId" placeholder="Item Code" onfocus='getItemDataByItemCode(this)'/> </td>
                                    <td><label class='item-name'>@item.itemName</label></td>
                                    <td>@Html.DropDownList("inventory_warehouse_id", new SelectList(@ViewBag.WarehouseID, "warehouse_id", "warehouse_name", item.inventory_warehouse_id), new { @class = "form-control warehouse", @onchange = "InitialItemInventory(this)" })</td>
                                    <td><label class='stock-balance'>@stockBalance</label> <label class="stock-balance-unit">@item.itemUnit</label></td>
                                    <td><input type='number' class='form-control damage-qty' value='@damageQty' onchange='checkDamageQty(this)' /></td>
                                    <td>
                                        <select class='form-control item-unit' onchange='checkDamageQty(this)'>
                                            @if (string.Compare(item.itemUnit, item.unit) == 0)
                                            {
                                                <option value="@item.itemUnit" selected>@item.itemUnit</option>
                                            }
                                            else
                                            {
                                                <option value="@item.itemUnit">@item.itemUnit</option>
                                            }
                                            @{
                                                if (item.uom != null)
                                                {

                                                    if (item.uom.uom1_id != null && item.uom.uom1_qty != null)
                                                    {
                                                        string uom1 = Regex.Replace(item.uom.uom1_id, @"\t|\n|\r", "");
                                                        if (string.Compare(uom1, item.unit) == 0)
                                                        {
                                                            <option selected value="@uom1">@uom1</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="@uom1">@uom1</option>
                                                        }
                                                    }
                                                    if (item.uom.uom2_id != null && item.uom.uom2_qty != null)
                                                    {
                                                        string uom2 = Regex.Replace(item.uom.uom2_id, @"\t|\n|\r", "");
                                                        if (string.Compare(uom2, item.unit) == 0)
                                                        {
                                                            <option selected value="@uom2">@uom2</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="@uom2">@uom2</option>
                                                        }
                                                    }
                                                    if (item.uom.uom3_id != null && item.uom.uom3_qty != null)
                                                    {
                                                        string uom3 = Regex.Replace(item.uom.uom3_id, @"\t|\n|\r", "");
                                                        if (string.Compare(uom3, item.unit) == 0)
                                                        {
                                                            <option selected value="@uom3">@uom3</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="@uom3">@uom3</option>
                                                        }
                                                    }
                                                    if (item.uom.uom4_id != null && item.uom.uom4_qty != null)
                                                    {
                                                        string uom4 = Regex.Replace(item.uom.uom4_id, @"\t|\n|\r", "");
                                                        if (string.Compare(uom4, item.unit) == 0)
                                                        {
                                                            <option selected value="@uom4">@uom4</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="@uom4">@uom4</option>
                                                        }
                                                    }
                                                    if (item.uom.uom5_id != null && item.uom.uom5_qty != null)
                                                    {
                                                        string uom5 = Regex.Replace(item.uom.uom5_id, @"\t|\n|\r", "");
                                                        if (string.Compare(uom5, item.unit) == 0)
                                                        {
                                                            <option selected value="@uom5">@uom5</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="@uom5">@uom5</option>
                                                        }

                                                    }
                                                }
                                            }
                                        </select>
                                    </td>
                                    <td><input type='text' class='form-control invoice_number' value="@item.invoice_number" /></td>
                                    <td>
                                        <div style="display:inline-block !important;margin-right:5px !important;">
                                            <div class="input-group date" data-provide="datepicker" data-autoclose="true" style="width:150px !important;">
                                                <input type="text" class="form-control invoice_date" style="width:130px !important;" value="@Convert.ToDateTime(item.invoice_date).ToString("dd/MM/yyyy")" />
                                                <div class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></div>
                                            </div>
                                        </div>
                                    </td>
                                    <td><textarea class='form-control remark' placeholder="Remark">@item.remark</textarea></td>
                                    <td><a href='javascript:void(0)' class="btn-sm btn-default" onclick='removeItemRow(this)'><i class='fa fa-minus-square'></i></a></td>
                                    <td>@if (count == itemDamages.Count())
                                    {
                                        <a href='javascript:void(0)' class="btn-sm btn-default" onclick='appendItemRow(this)'><i class='fa fa-plus-square'></i></a>
                                    }</td>
                                </tr>
                            count++;
                        }
                    }
                </tbody>
            </table>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Submit" class="btn btn-default" id="btnSubmit" onclick="saveStockDamage()" />
                @Html.ActionLink("Cancel", "Index",null,new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
}

@section Scripts{
@*<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.1/jquery-ui.min.js"></script>*@
    <script type="text/javascript">
        $(function () {
            var countItemDamage;
            @{ 
                int count = Model.inventoryDetails.Count();
                <text> countItemDamage=@count; </text>
            }
            //initialTypeRow(countItemDamage,'A');
            $(".date").datepicker({ format: 'dd/mm/yyyy' });
            $('#stockDamageTable').on('changeDate', 'td div.date', function () {
                $(this).datepicker('hide');
            });
        });
    </script>
    <script type="text/javascript">
        function initialTypeRow(ind, rowLetter) {
            $('#stockDamageTable tr').eq(ind).after("" +
                    "<tr id='type" + rowLetter + "' class='" + rowLetter + "'>" +
                        "<td>" + rowLetter + "</td>" +
                        "<td><input type='hidden' class='type-id'/></td>" +
                        "<td><input type='text' class='form-control type-code' id='" + rowLetter + "' onfocus='getItemDateRow(this)' placeholder='Item Type Code'/></td>" +
                        "<td><label class='type-description'></label></td>" +
                        "<td></td>" +
                        "<td></td>" +
                        "<td></td>" +
                        "<td></td>" +
                        "<td></td>" +
                        "<td></td>" +
                        "<td><a href='javascript:void(0)' onclick='removeTypeRow(this)'><i class='fa fa-minus-circle' style='font-size:30px;'></i></a></td>" +
                        "<td><a href='javascript:void(0)' onclick='appendTypeRow(this)'><i class='fa fa-plus-circle' style='font-size:30px;'></i></a></td>" +
                    "</tr>"
                );
        }
        function initialItemRow(ind, rowLetter, rowNumber) {
            $('#stockDamageTable tr').eq(ind).after("" +
                                        "<tr class='" + rowLetter + "' id='item" + rowLetter + rowNumber + "'>" +
                                            "<td>" + rowNumber + "</td>" +
                                            
                                            "<td><input type='hidden' class='item-id'/><input type='text' class='form-control item-code' placeholder='Item Code' onfocus='getItemDataByItemCode(this)' id='"+rowLetter+rowNumber+"'/></td>" +
                                            "<td><label class='item-name'></label></td>" +
                                            "<td><select class='form-control warehouse' onchange='InitialItemInventory(this)'><option value>Select Warehouse</option></select></td>" +
                                            "<td><label class='stock-balance'>" + 0 + "</label> <label class='stock-balance-unit'></label></td>" +
                                            "<td><input type='number' class='form-control damage-qty' value='0' onchange='checkDamageQty(this)'/></td>" +
                                            "<td><select class='form-control item-unit' onchange='checkDamageQty(this)'></select></td>" +
                                            "<td><input type='text' class='form-control invoice_number'/></td>" +
                                            "<td>" +
                                                '<div style="display:inline-block !important;margin-right:5px !important;">' +
                                                            '<div class="input-group date" data-provide="datepicker" data-autoclose="true" style="width:150px !important;">' +
                                                                '<input type="text" class="form-control invoice_date" style="width:130px !important;"/>' +
                                                                '<div class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></div>' +
                                                            '</div>' +
                                                        '</div>' +
                                            "</td>" +
                                            "<td><textarea class='form-control remark' placeholder='Remark'></textarea></td>" +
                                            "<td><a href='javascript:void(0)' class='btn-sm btn-default' onclick='removeItemRow(this)'><i class='fa fa-minus-square'></i></a></td>" +
                                            "<td><a href='javascript:void(0)' class='btn-sm btn-default' onclick='appendItemRow(this)'><i class='fa fa-plus-square'></i></a></td>" +
                                        "</tr>"
                );
            InitialItemWarehouse(ind);
        }
        function appendTypeRow(row) {
            var ind = row.parentNode.parentNode.rowIndex;
            var typeClass = $('#stockDamageTable tr').eq(ind).attr('class');
            var rowLetter = $('#stockDamageTable tr').eq(ind).find('td:first-child').text();
            var countTypeClass = $('.' + typeClass).length;
            var typeLetter = String.fromCharCode(Number(rowLetter.charCodeAt(0) + 1));
            if (countTypeClass == 1)
                return;
            initialTypeRow(Number(ind + countTypeClass - 1), typeLetter);
            $('#stockDamageTable tr').eq(ind).find('td:last-child').html('');
        }

        function removeTypeRow(row) {
            var ind = row.parentNode.parentNode.rowIndex;
            var arrTypeId = [];
            var isLastChild = $('#stockDamageTable tr').eq(ind).find("td:nth-child(12) a").length == 0 ? false : true;
            var typeClass = $('#stockDamageTable tr').eq(ind).attr('class');
            var typeId = $('#stockDamageTable tr').eq(ind).attr('id');
            var countTypeClass = $('.' + typeClass).length;
            var count_table_row = $('#stockDamageTable tr').length;
            for (var i = 1; i <= count_table_row; i++) {
                var id = $('#stockDamageTable tr').eq(i).attr('id');
                if (id != undefined && id.substr(0, 4) == "type")
                    arrTypeId.push(id);
            }

            if (arrTypeId.length == 1) {
                return;
            }

            for (var i = 0; i < countTypeClass; i++) {
                document.getElementById('stockDamageTable').deleteRow(ind);
            }
            if (isLastChild) {
                $('#stockDamageTable tr#' + arrTypeId[arrTypeId.length - 2]).find('td:last-child').html("<a href='javascript:void(0)' onclick='appendTypeRow(this)'><i class='fa fa-plus-circle' style='font-size:30px;color:black'></i></a>");
            } else {
                var deleted_index = arrTypeId.indexOf(typeId);
                arrTypeId.splice(deleted_index, 1);
                for (var i = 0; i < arrTypeId.length; i++) {
                    var letter = String.fromCharCode(Number(65 + i));
                    $('tr#' + arrTypeId[i] + ' td:nth-child(1)').html(letter);
                }
            }
        }

        function appendItemRow(row) {
            var ind = row.parentNode.parentNode.rowIndex;
            var typeClass = $('#stockDamageTable tr').eq(ind).attr('class');
            var countTypeClass = $('.' + typeClass).length;
            var rowNumber = $('#stockDamageTable tr').eq(ind).find('td:first-child').text();
            var warehouseId = $('#stockDamageTable tr').eq(ind).find('select.warehouse').val();
            var itemId = $('#stockDamageTable tr').eq(ind).find('input.item-id').val();
            var damageQty = $('#stockDamageTable tr').eq(ind).find('input.damage-qty').val();
            if (!warehouseId || !itemId || Number(damageQty) <= 0) {
                return;
            }
            initialItemRow(ind, typeClass, Number(rowNumber) + 1);
            $('#stockDamageTable tr').eq(ind).find('td:nth-child(12)').html('');
            //$('#stockDamageTable tr').eq(countTypeClass - (countTypeClass - 1)).find('td:nth-child(11)').attr('rowspan', Number(countTypeClass + 1));
            //$('#stockDamageTable tr').eq(countTypeClass - (countTypeClass - 1)).find('td:nth-child(12)').attr('rowspan', Number(countTypeClass + 1));
        }

        function removeItemRow(row) {
            var arrItemId = [];
            var ind = row.parentNode.parentNode.rowIndex;
            var isLastChild = $('#stockDamageTable tr').eq(ind).find("td:nth-child(12) a").length == 0 ? false : true;
            var itemClass = $('#stockDamageTable tr').eq(ind).attr('class');
            var itemId = $('#stockDamageTable tr').eq(ind).attr('id');
            var count_table_row = $('#stockDamageTable tr').length;
            for (var i = 1; i <= count_table_row; i++) {
                var id = $('#stockDamageTable tr').eq(i).attr('id');
                if (id != undefined ) //&& id.substr(0, 5) == "item" + itemClass
                    arrItemId.push(id);
            }
            if (arrItemId.length == 1) {
                return;
            }
            document.getElementById('stockDamageTable').deleteRow(ind);
            if (isLastChild)
                $('#stockDamageTable tr#' + arrItemId[arrItemId.length - 2]).find('td:nth-child(12)').html("<a href='javascript:void(0)' class='btn-sm btn-default' onclick='appendItemRow(this)'><i class='fa fa-plus-square'></i></a>");
            else {
                var deleted_index = arrItemId.indexOf(itemId);
                arrItemId.splice(deleted_index, 1);
                for (var i = 0; i < arrItemId.length; i++) {
                    $('tr#' + arrItemId[i] + ' td:nth-child(1)').html(Number(i) + 1);
                }
            }
            var countTypeClass = $('.' + itemClass).length;
            //$('#stockDamageTable tr').eq(countTypeClass - (countTypeClass - 1)).find('td:nth-child(11)').attr('rowspan', Number(countTypeClass));
            //$('#stockDamageTable tr').eq(countTypeClass - (countTypeClass - 1)).find('td:nth-child(12)').attr('rowspan', Number(countTypeClass));
        }

        function getItemDateRow(row) {
            var ind = row.parentNode.parentNode.rowIndex;
            var rowId = $('#stockDamageTable tr').eq(ind).find('input[type="text"].type-code').attr('id');
            var typeClass = $('#stockDamageTable tr').eq(ind).attr('class');
            var category_id;
            autocompleted(rowId, typeClass);

            function autocompleted(rowId, typeClass) {
                $("#" + rowId).autocomplete({
                    source: '/ProductCategory/GetProductCategoryCodes',
                    select: function (event, ui) {
                        AutoCompleteSelectHandler(event, ui, ind, typeClass);
                    }
                });
            }

            function AutoCompleteSelectHandler(event, ui, ind, typeClass) {
                var selectedObj = ui.item;
                var item = (selectedObj.value).split(' ');
                category_id = selectedObj.id;
                GetItemTypeDataRow(ind, category_id, typeClass)
            }

            function GetItemTypeDataRow(ind, item_type_id, typeClass) {
                if (item_type_id != "") {
                    $.ajax({
                        url: '/ProductCategory/GetProductCategoryInfo',
                        type: "get",
                        dataType: "json",
                        async: false,
                        data: { category_id: item_type_id },
                        success: function (data) {
                            $.each(data, function (index, item) {
                                $('#stockDamageTable tr').eq(ind).find('input[type="hidden"].type-id').val(item.p_category_id);
                                $('#stockDamageTable tr').eq(ind).find('input[type="text"].type-code').val(item.p_category_code);
                                $('#stockDamageTable tr').eq(ind).find('label.type-description').text(item.p_category_name);
                                category_id = item.p_category_id;
                                GetItemDataRow(ind, category_id, typeClass)
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            $('#stockDamageTable tr').eq(ind).find('input[type="hidden"].type-id').val('');
                            $('#stockDamageTable tr').eq(ind).find('label.type-description').text('');
                            alert(textStatus);
                        }
                    });
                }
            }

            function GetItemDataRow(rowIndex, typeId, typeClass) {
                if (typeId != "") {
                    var itemClass = $('.' + typeClass);
                    var strBtnAdd = "";
                    var countRow = 0;
                    if (itemClass.length > 0) {
                        for (var i = 1; i < itemClass.length; i++) {
                            var idx = itemClass[i].rowIndex;
                            document.getElementById('stockDamageTable').deleteRow(idx);
                        }
                    }
                    $.ajax({
                        url: '/Product/GetProductDataRow',
                        type: "get",
                        dataType: "json",
                        async: false,
                        data: { category_id: typeId },
                        success: function (data) {
                            $.each(data, function (index, item) {
                                countRow = item.length;
                                $.each(item, function (index1, item1) {
                                    if (index1 == item.length - 1)
                                        strBtnAdd = "<a href='javascript:void(0)' onclick='appendItemRow(this)'><i class='fa fa-plus-square' style='font-size:30px;color:blue'></i></a>";
                                    $('#stockDamageTable').find('tr').eq(rowIndex + index1).after("" +
                                        "<tr class='" + typeClass + "' id='item" + typeClass + (Number(index1) + 1) + "'>" +
                                            "<td>" + (Number(index1) + 1) + "</td>" +
                                            "<td><select class='form-control warehouse' onchange='InitialItemInventory(this)'><option value>Select Warehouse</option></select></td>" +
                                            "<td><input type='hidden' class='item-id' value='" + item1.product_id + "'/><input type='text' class='form-control item-code' value='" + item1.product_code + "' id='" + typeClass + (Number(index1) + 1) + "' onfocus='getItemDataByItemCode(this)'/></td>" +
                                            "<td><label class='item-name'>" + item1.product_name + "</label></td>" +
                                            "<td><label class='item-unit'>" + item1.product_unit + "</label></td>" +
                                            "<td><label class='stock-balance'>" + parseFloat(0).toFixed(2) + "</label></td>" +
                                            "<td><input type='number' class='form-control damage-qty' value='" + parseFloat(0).toFixed(2) + "' onchange='checkDamageQty(this)'/></td>" +
                                            "<td><textarea class='form-control remark'></textarea></td>" +
                                            "<td><a href='javascript:void(0)' onclick='removeItemRow(this)'><i class='fa fa-minus-square' style='font-size:30px;color:red'></i></a></td>" +
                                            "<td>" + strBtnAdd + "</td>" +
                                        "</tr>"
                                    );
                                    InitialItemWarehouse(rowIndex + index1);
                                });


                            });
                            $('#stockDamageTable tr').eq(rowIndex).find('td:nth-child(11)').attr('rowspan', Number(countRow + 1));
                            $('#stockDamageTable tr').eq(rowIndex).find('td:last-child').attr('rowspan', Number(countRow + 1));
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            alert(textStatus);
                        }
                    });
                }
            }
        }

        function getItemDataByItemCode(row) {
            var ind = row.parentNode.parentNode.rowIndex;
            var rowId = $('#stockDamageTable tr').eq(ind).find('input.item-code').attr('id');
            var itemClass = $('#stockDamageTable tr').eq(ind).attr('class');
            var itemTypeId = $('#stockDamageTable tr#type' + itemClass).find('input.type-id').val();
            var itemId;
            autocompleted(rowId, itemClass, itemTypeId);

            function autocompleted(rowId, itemClass, itemTypeId) {
                $("#" + rowId).autocomplete({
                    //source: '/Product/GetProductAutoSuggest',
                    source: '@Url.Action("GetProductAutoSuggestName", "Product")',
                    select: function (event, ui) {
                        AutoCompleteSelectHandler(event, ui, ind, itemClass, itemTypeId);
                    }
                });
            }

            function AutoCompleteSelectHandler(event, ui, ind, itemClass, itemTypeId) {
                var selectedObj = ui.item;
                var item = (selectedObj.value).split(' ');
                itemId = selectedObj.id;
                GetItemDataRow(ind, itemId, itemClass, itemTypeId)
            }

            function GetItemDataRow(ind, itemId, itemClass, itemTypeId) {
                if (itemId != "") {
                    $.ajax({
                        //url: '/Product/GetProductDataByID',
                        url: '@Url.Action("GetProductDataByCode", "Product")',
                        type: "get",
                        dataType: "json",
                        async: false,
                        data: { id: itemId},
                        success: function (da) {
                            $('#stockDamageTable tr').eq(ind).find('select.warehouse').val('');
                            $('#stockDamageTable tr').eq(ind).find('label.stock-balance').text(parseFloat(0).toFixed(2));
                            $('#stockDamageTable tr').eq(ind).find('input.damage-qty').text(parseFloat(0).toFixed(2));
                            $('#stockDamageTable tr').eq(ind).find('select.item-unit').empty();
                            if (da.data) {
                                var item = da.data;
                                //console.log(item);
                                $('#stockDamageTable tr').eq(ind).find('input[type="hidden"].item-id').val(item.product_id);
                                $('#stockDamageTable tr').eq(ind).find('input[type="text"].item-code').val(item.product_code);
                                $('#stockDamageTable tr').eq(ind).find('label.item-name').text(item.product_name);
                                //$('#stockDamageTable tr').eq(ind).find('label.item-unit').text(item.product_unit);
                                $('#stockDamageTable tr').eq(ind).find('select.item-unit').append("<option value='" + item.product_unit.replace(/(\r\n\t|\n|\r\t)/gm, "").trim() + "'>" + item.product_unit.replace(/(\r\n\t|\n|\r\t)/gm, "").trim() + "</option>");

                                if (item.uom1_id && item.uom1_qty) {
                                    $('#stockDamageTable tr').eq(ind).find('select.item-unit').append("<option value='" + item.uom1_id.replace(/(\r\n\t|\n|\r\t)/gm, "").trim() + "," + item.uom1_qty + "'>" + item.uom1_id.replace(/(\r\n\t|\n|\r\t)/gm, "").trim() + "</option>");
                                }
                                if (item.uom2_id && item.uom2_qty) {
                                    $('#stockDamageTable tr').eq(ind).find('select.item-unit').append("<option value='" + item.uom2_id.replace(/(\r\n\t|\n|\r\t)/gm, "").trim() + "," + item.uom2_qty + "'>" + item.uom2_id + "'>" + item.uom2_id.replace(/(\r\n\t|\n|\r\t)/gm, "").trim() + "</option>");
                                }
                                if (item.uom3_id && item.uom3_qty) {
                                    $('#stockDamageTable tr').eq(ind).find('select.item-unit').append("<option value='" + item.uom3_id.replace(/(\r\n\t|\n|\r\t)/gm, "").trim() + "," + item.uom3_qty + "'>" + item.uom3_id.replace(/(\r\n\t|\n|\r\t)/gm, "").trim() + "</option>");
                                }
                                if (item.uom4_id && item.uom4_qty) {
                                    $('#stockDamageTable tr').eq(ind).find('select.item-unit').append("<option value='" + item.uom4_id.replace(/(\r\n\t|\n|\r\t)/gm, "").trim() + "," + item.uom4_qty + "'>" + item.uom4_id.replace(/(\r\n\t|\n|\r\t)/gm, "").trim() + "</option>");
                                }
                                if (item.uom5_id && item.uom5_qty) {
                                    $('#stockDamageTable tr').eq(ind).find('select.item-unit').append("<option value='" + item.uom5_id.replace(/(\r\n\t|\n|\r\t)/gm, "").trim() + "," + item.uom5_qty + "'>" + item.uom5_id.replace(/(\r\n\t|\n|\r\t)/gm, "").trim() + "</option>");
                                }
                            } else {
                                $('#stockDamageTable tr').eq(ind).find('input[type="hidden"].item-id').val('');
                                $('#stockDamageTable tr').eq(ind).find('label.item-name').text(' ');
                                $('#stockDamageTable tr').eq(ind).find('select.item-unit').empty();
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            $('#stockDamageTable tr').eq(ind).find('select.warehouse').val('');
                            $('#stockDamageTable tr').eq(ind).find('label.stock-balance').text(parseFloat(0).toFixed(2));
                            $('#stockDamageTable tr').eq(ind).find('label.stock-balance-unit').text(parseFloat(0).toFixed(2));
                            $('#stockDamageTable tr').eq(ind).find('input.damage-qty').text(parseFloat(0).toFixed(2));
                            $('#stockDamageTable tr').eq(ind).find('input[type="hidden"].item-id').val('');
                            $('#stockDamageTable tr').eq(ind).find('label.item-name').text(' ');
                            $('#stockDamageTable tr').eq(ind).find('select.item-unit').empty();
                            alert(textStatus);
                        }
                    });
                }
            }

        }

        function InitialItemWarehouse(ind) {
            $.ajax({
                url: '/Warehouse/GetWarehouseDropdownList',
                type: "get",
                dataType: "json",
                async: false,
                success: function (da) {
                    if (da.result == "success") {
                        $.each(da.data, function (index, item) {
                            $('#stockDamageTable tr').eq(ind + 1).find('select.warehouse').append("<option value='" + item.warehouse_id + "'>" + item.warehouse_name + "</option>");
                        });
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                }
            });
        }

        function InitialItemInventory(row) {
            var ind = row.parentNode.parentNode.rowIndex;
            var itemId = $('#stockDamageTable tr').eq(ind).find('input[type="hidden"].item-id').val();
            var warehouseId = $('#stockDamageTable tr').eq(ind).find('select.warehouse').val();
            if (!itemId || !warehouseId) {
                return;
            }
            $.ajax({
                url: '/StockDamage/GetInventoryItem',
                type: "get",
                dataType: "json",
                async: false,
                data: { itemId: itemId, warehouseId: warehouseId },
                success: function (da) {
                    if (da.result == "success") {
                        var damageQty = $('#stockDamageTable tr').eq(ind).find('input.damage-qty').val();
                        
                        if (da.data) {
                            $('#stockDamageTable tr').eq(ind).find('label.stock-balance').text(da.data.total_quantity);
                            $('#stockDamageTable tr').eq(ind).find('label.stock-balance-unit').text(da.data.itemUnit);
                            if (Number(da.data.total_quantity) < Number(damageQty)) {
                                alert("Damage item quantity must be smaller than Stock balance.");
                                return;
                            }
                        } else {
                            $('#stockDamageTable tr').eq(ind).find('label.stock-balance').text(0);
                            if (Number(damageQty)>0) {
                                alert("Damage item quantity must be smaller than Stock balance.");
                                return;
                            }
                        }

                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                }
            });
        }
        function checkDamageQty(row) {
            var ind = row.parentNode.parentNode.rowIndex;
            var stockBalance = $('#stockDamageTable tr').eq(ind).find('label.stock-balance').text();
            var stockBalanceUnit = $('#stockDamageTable tr').eq(ind).find('label.stock-balance-unit').text();
            var damageQty = $('#stockDamageTable tr').eq(ind).find('input.damage-qty').val();
            var damageUnit = $('#stockDamageTable tr').eq(ind).find('select.item-unit').val();
            console.log(stockBalance + " " + stockBalanceUnit + " " + damageQty + " " + damageUnit);

            if (!damageQty && !damageUnit)
                return;
            var splitDamageUnit = damageUnit.split(',');
            if (stockBalanceUnit == splitDamageUnit[0]) {
                if (damageQty && Number(damageQty) > Number(stockBalance)) {
                    alert("Damage Qantity must be smaller or equal to balance.");
                    $('#stockDamageTable tr').eq(ind).find('input.damage-qty').focus();
                    $('#stockDamageTable tr').eq(ind).find('input.damage-qty').val(stockBalance);
                }
            }
            else {
                var quantity = 0;
                var selectedIndex = $('#stockDamageTable tr').eq(ind).find('select.item-unit').prop('selectedIndex');
                if (damageQty) {
                    if (selectedIndex == 1) {
                        var splitElement = $('#stockDamageTable tr').eq(ind).find('select.item-unit option').eq(selectedIndex).val().split(',');
                        quantity = damageQty / splitElement[1];
                    }
                    else if (selectedIndex == 2) {
                        var splitElement = $('#stockDamageTable tr').eq(ind).find('select.item-unit option').eq(selectedIndex).val().split(',');
                        var splitElement2 = $('#stockDamageTable tr').eq(ind).find('select.item-unit option').eq(2).val().split(',');
                        quantity = (damageQty / splitElement[1]) / splitElement2[1];
                    }
                    else if (selectedIndex == 3) {
                        var splitElement = $('#stockDamageTable tr').eq(ind).find('select.item-unit option').eq(selectedIndex).val().split(',');
                        var splitElement2 = $('#stockDamageTable tr').eq(ind).find('select.item-unit option').eq(2).val().split(',');
                        var splitElement3 = $('#stockDamageTable tr').eq(ind).find('select.item-unit option').eq(3).val().split(',');
                        quantity = ((damageQty / splitElement[1]) / splitElement3[1]) / splitElement2[1];
                    }
                    else if (selectedIndex == 4) {
                        var splitElement = $('#stockDamageTable tr').eq(ind).find('select.item-unit option').eq(selectedIndex).val().split(',');
                        var splitElement2 = $('#stockDamageTable tr').eq(ind).find('select.item-unit option').eq(2).val().split(',');
                        var splitElement3 = $('#stockDamageTable tr').eq(ind).find('select.item-unit option').eq(3).val().split(',');
                        var splitElement4 = $('#stockDamageTable tr').eq(ind).find('select.item-unit option').eq(4).val().split(',');
                        quantity = ((((damageQty / splitElement[1]) / splitElement4[1]) / splitElement3[1]) / splitElement2[1]);
                    } else if (selectedIndex == 5) {
                        var splitElement = $('#stockDamageTable tr').eq(ind).find('select.item-unit option').eq(selectedIndex).val().split(',');
                        var splitElement2 = $('#stockDamageTable tr').eq(ind).find('select.item-unit option').eq(2).val().split(',');
                        var splitElement3 = $('#stockDamageTable tr').eq(ind).find('select.item-unit option').eq(3).val().split(',');
                        var splitElement4 = $('#stockDamageTable tr').eq(ind).find('select.item-unit option').eq(4).val().split(',');
                        var splitElement5 = $('#stockDamageTable tr').eq(ind).find('select.item-unit option').eq(5).val().split(',');
                        quantity = ((((damageQty / splitElement[1]) / splitElement5[1]) / splitElement4[1]) / splitElement3[1]) / splitElement2;
                    }
                    if (quantity > Number(stockBalance)) {
                        alert("Damage Qantity must be smaller or equal to balance.");
                        $('#stockDamageTable tr').eq(ind).find('input.damage-qty').focus();
                        $('#stockDamageTable tr').eq(ind).find('input.damage-qty').val(stockBalance);
                        return;
                    }
                }
            }
        }
        function enable_submit_button(is_submit) {
            if (is_submit) {
                $('#btnSubmit').text("Submitting...");
                $('#btnSubmit').attr('disabled', true);
            } else {
                $('#btnSubmit').text("Submit");
                $('#btnSubmit').attr('disabled', false);
            }
        }
        function saveStockDamage() {
            enable_submit_button(true);
            var inventories = [];
            var item_element = {};
            var warehouses = $('.warehouse');
            var items = $('.item-id');
            var stockBalances = $('.stock-balance');
            var damageQty = $('.damage-qty');
            var remark = $('.remark');
            var units = $('.item-unit');
            var invoiceNumbers = $('.invoice_number');
            var invoiceDates = $('.invoice_date');
            var countInvalid = 0;
            for (var i = 0; i < items.length; i++) {
                var splitUnit = (units[i].value).split(',');
                if (warehouses[i].value && items[i] && stockBalances[i].innerHTML && damageQty[i].value) {
                    item_element = {};
                    item_element.warehouse_id = warehouses[i].value;
                    item_element.product_id = items[i].value;
                    item_element.total_quantity = stockBalances[i].innerHTML;
                    item_element.out_quantity = damageQty[i].value;
                    item_element.remark = remark[i].value;
                    item_element.unit =splitUnit[0].trim();
                    item_element.invoice_number = invoiceNumbers[i].value;
                    item_element.invoice_date = convertDDMMYYYtoMMDDYYYY(invoiceDates[i].value);
                    inventories.push(item_element);
                }
                else {
                    countInvalid++;
                }
            }
            if (countInvalid > 0) {
                alert("Please select warehouse and fill in damage qty");
                return;
            }

            var model = {
                stock_damage_id:$('#stock_damage_id').val(),
                stock_damage_number: $('#stock_damage_number').text(),
                inventories: inventories,
            };
            $.ajax({
                url: "/StockDamage/Edit",
                type: "post",
                dataType: "json",
                async: false,
                data: { model: model },
                success: function (da) {
                    if (da.result == "success") {
                        $.notify('Your data has been saved!', { className: 'success' });
                        window.location.href = '/StockDamage/Index';
                    } else if (da.result == "error") {
                        $.notify(da.message, { className: 'error' });
                    }
                },
                error: function (err) {
                    $.notify('Your data is error while saving!', { className: 'error' });
                }
            });
        }
    </script>
    }
