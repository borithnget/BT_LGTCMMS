@model BT_KimMex.Models.ItemReceiveViewModel

@{
    ViewBag.Title = "ApproveFeedback";
}
<style type="text/css">
    #itemReceiveTable tr td{
        vertical-align:middle !important;
    }
</style>

<div class="w3-container">
    <h3 class="title">Approve/ Feedback Good Receive Note</h3>
</div>

<div class="form-horizontal">
    
    @Html.HiddenFor(model => model.receive_item_voucher_id)
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                @Html.Label("Date:", new { @class = "col-md-4" })
                @Html.Label(BT_KimMex.Class.CommonClass.ToLocalTime(Convert.ToDateTime(Model.created_date)).ToString("dd/MM/yyyy"), new { @class = "col-md-8" })
            </div>
            
            <div class="form-group">
                @Html.Label("Receive Type:", new { @class = "col-md-4" })
                @Html.Label(Model.received_type, new { @class = "col-md-8" })
            </div>
            
            <div class="form-group">
                <label class="col-md-4">MR Ref. No.:</label>
                <label class="col-md-8">@Model.mr_ref_number</label>
            </div>
            <div class="form-group">
                @if (string.Compare(Model.received_type, "Stock Return") == 0 || string.Compare(Model.received_type, "Return Workshop") == 0)
                {
                    <label class="col-md-4">From Warehouse:</label>
                }
                else
                {
                    <label class="col-md-4">To Warehouse:</label>
                }
                
                <label class="col-md-8">@Model.receivedItems[0].warehouseName</label>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.received_number, new { @class = "col-md-4" })
                @Html.Label(Model.received_number, new { @class = "col-md-8" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ref_number, new { @class = "col-md-4" })
                @Html.Label(Model.ref_number, new { @class = "col-md-8" })
            </div>
            <div class="form-group">
                <label class="col-md-4">Project: </label>
                @Html.Label(Model.project_full_name, new { @class = "col-md-8" })
            </div>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-bordered" id="itemReceiveTable">
            <thead>
                <tr>
                    <th rowspan="2">No.</th>
                    <th rowspan="2">Item Code</th>
                    <th rowspan="2">Item Name</th>
                    <th rowspan="2">Quantity</th>
                    @if (Model.receivedHistories.Count() > 0)
                    {
                        <th colspan="@Model.receivedHistories.Count()">History</th>
                    }
                    <th rowspan="2">Received QTY</th>
                        @if (string.Compare(Model.received_type, "Stock Return") == 0 || string.Compare(Model.received_type, "Return Workshop") == 0)
                        {
                            <th rowspan="2">To Warehouse</th>
                        }
                        else
                        {
                            <th rowspan="2">From Supplier/ Warehouse</th>
                        }
                   
                    <th rowspan="2">Invoice No.</th>
                    <th rowspan="2">Invoice Date</th>
                    @*<th>To Warehouse</th>*@
                    <th rowspan="2">Approve</th>
                    <th rowspan="2">Feedback</th>
                    <th rowspan="2">Complete</th>
                    <th rowspan="2">Note <br /> <span>(If complete note is required.)</span></th>
                </tr>
                @if (Model.receivedHistories.Count() > 0)
                {
                    <tr>
                        @for (int i = 1; i <= Model.receivedHistories.Count(); i++)
                        {

                            <th>@i</th>

                        }
                    </tr>
                }
            </thead>
            <tbody>
                @{
                    int countRow = 1;
                    int countPending = 1;
                    foreach (BT_KimMex.Models.InventoryViewModel item in Model.receivedItems)
                    {
                        var inv = Model.inventories.Where(x => string.Compare(x.product_id, item.product_id) == 0).Select(s => new { s }).FirstOrDefault();
                        if (string.Compare(item.item_status, "approved") == 0 || item.completed)
                        {

                            <tr>
                                <td>@countRow</td>
                                <td><input type="hidden" class="detail_id" value="@item.inventory_id" /> @item.itemCode</td>
                                <td>@item.itemName</td>
                                @if (string.Compare(Model.received_type, "Purchase Order") == 0)
                                {
                                    <td>@string.Format("{0:G29}", Double.Parse(inv.s.total_quantity.ToString())) @item.itemUnitName</td>
                                }
                                else
                                {
                                    <td>@string.Format("{0:G29}", Double.Parse(inv.s.out_quantity.ToString())) @item.itemUnitName</td>
                                }
                                @foreach (var obj in Model.receivedHistories)
                                {
                                    var re = obj.inventories.Where(s => string.Compare(s.product_id, item.product_id) == 0).FirstOrDefault();
                                    if (re != null)
                                    {
                                        <td class="text-center">@re.in_quantity</td>
                                    }
                                    else
                                    {
                                        <td></td>
                                    }

                                }

                                <td>@string.Format("{0:G29}", Double.Parse(item.total_quantity.ToString())) @item.unit</td>
                                @if (string.Compare(Model.received_type, "Stock Return") == 0)
                                {
                                    <td>@inv.s.warehouseName</td>
                                }
                                else
                                {
                                    <td>@item.supplier_name</td>
                                }
                                
                                <td>@item.invoice_number</td>
                                <td>@Convert.ToDateTime(item.invoice_date).ToString("dd/MM/yyyy")</td>
                                @*<td>@item.warehouseName</td>*@
                                <td></td>
                                <td></td>
                                <td></td>
                                <td>@item.remark</td>
                            </tr>
                        }
                        else
                        {
                            string name = "item" + countPending;
                            <tr>
                                <td>@countRow</td>
                                <td><input type="hidden" class="received_detail" value="@item.inventory_id" /> @item.itemCode</td>
                                <td>@item.itemName</td>
                                @if (string.Compare(Model.received_type, "Purchase Order") == 0)
                                {
                                    <td>@string.Format("{0:G29}", Double.Parse(inv.s.total_quantity.ToString())) @item.itemUnitName</td>
                                }
                                else
                                {
                                    <td>@string.Format("{0:G29}", Double.Parse(inv.s.out_quantity.ToString())) @item.itemUnitName</td>
                                }
                                @foreach (var obj in Model.receivedHistories)
                                {
                                    var re = obj.inventories.Where(s => string.Compare(s.product_id, item.product_id) == 0).FirstOrDefault();
                                    if (re != null)
                                    {
                                        <td class="text-center">@re.in_quantity</td>
                                    }
                                    else
                                    {
                                        <td></td>
                                    }

                                }
                                <td>@string.Format("{0:G29}", Double.Parse(item.total_quantity.ToString())) @item.unitName</td>
                                @if (string.Compare(Model.received_type, "Stock Return") == 0)
                                {
                                    <td>@inv.s.warehouseName</td>
                                }
                                else
                                {
                                    <td>@item.supplier_name</td>
                                }
                                <td>@item.invoice_number</td>
                                <td>@Convert.ToDateTime(item.invoice_date).ToString("dd/MM/yyyy")</td>
                                @*<td>@item.warehouseName</td>*@
                                <td><label><input type="radio" class="approval" name="@name" value="approved"> Approve</label></td>
                                <td><label><input type="radio" class="approval" name="@name" value="feedbacked"> Feedback</label></td>
                                <td><label><input type="checkbox" class="isCompleted" />Complete</label></td>
                                <td>
                                    <textarea class="form-control feedback_comment">@item.remark</textarea>
                                </td>
                            </tr>
                            countPending++;
                        }
                        countRow++;
                    }
                }
            </tbody>
        </table>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <button type="button" class="w3-button w3-tiny w3-teal" id="btnCreate" onclick="approveFeedbackItemReceived()">Submit</button>
            <a href="javascript:history.back()" class="w3-button w3-tiny w3-red">Back</a>
        </div>
    </div>
</div>



@section Scripts{
    <script type="text/javascript">
        function approveFeedbackItemReceived() {
            enable_submit_button(true);
            var models = [];
            var item_element = {};
            var countInvalidStatus = 0;
            var countInvalidComplete = 0;
            var receivedItemId = $('#receive_item_voucher_id').val();
            var receivedDetails = $('.received_detail');
            var feedbackComments = $('.feedback_comment');
            var isComplete = $('.isCompleted');
            for (var i = 1; i <= receivedDetails.length; i++) {
                var item_status = $('input[name=item' + i + ']:checked').val();
                if (!item_status) countInvalidStatus++;
                var idx = Number(i - 1);
                item_element = {};
                item_element.ri_detail_id = receivedDetails[idx].value;
                item_element.item_status = item_status;
                item_element.remark = feedbackComments[idx].value;
                item_element.completed = $(isComplete[idx]).is(':checked') ? true : false;
                if (item_element.completed == true && (item_element.remark == "" || item_element.remark == null || item_element == undefined)) countInvalidComplete++;
                models.push(item_element);
            }
            if (countInvalidStatus > 0) {
                alert("Please select Approve or Feedback option for each item.");
                enable_submit_button(false);
                return;
            }
            if (countInvalidComplete > 0) {
                alert("If item is completed please provide note.");
                enable_submit_button(false);
                return;
            }
            $.ajax({
                url: "@Url.Action("ApproveFeedback", "ItemReceive")",
                type: "post",
                dataType: "json",
                //async: false,
                data: { id: receivedItemId , models: models },
                success: function (da) {
                    if (da.result == "success") {
                        alert('Your data has been sumitted successfully.');
                        window.location.href = '@Url.Action("MyApproval")';
                    } else {
                        alert('Your data is error while sumiting.');
                        enable_submit_button(false);
                    }
                },
                error: function (err) {
                    alert('Your data is error while sumiting.');
                    enable_submit_button(false);
                }
            });
        }

        function enable_submit_button(is_submit) {
            if (is_submit) {
                $('#btnCreate').text("Submitting...");
                $('#btnCreate').attr('disabled', true);
            } else {
                $('#btnCreate').text("Submit");
                $('#btnCreate').attr('disabled', false);
            }
        }
    </script>
}