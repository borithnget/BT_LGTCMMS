@model BT_KimMex.Models.UserUpdateViewModel
@using System.Linq;
@{
    ViewBag.Title = "Edit User";
    //Layout = "~/Views/Shared/_LayoutBackend.cshtml";
}
<style type="text/css">
    table tr td:first-child {
        text-align: left !important;
    }
</style>

<div class="panel panel-default">
    <div class="panel-heading" style="font-size:20px !important;font-weight:bold !important;">
        @ViewBag.Title
    </div>
    <div class="panel-body">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.UserID)

                <div class="col-lg-12 col-md-12 col-xs-12 col-sm-12">
                    <div class="col-lg-8 col-md-8 col-xs-12 col-sm-12">

                        <div class="form-group">
                            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Position, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.DropDownList("Position", @ViewBag.PositionID as SelectList, "Select Position", new { @class = "form-control", id = "Position" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                <table>
                                    @{
                                        string[] role = Model.Role;
                                        var roles = ViewBag.GroupID;
                                        foreach (var item in roles)
                                        {
                                            bool check = false;
                                            if (role != null)
                                            {
                                                foreach (var r in role)
                                                {
                                                    if (string.Compare(item.Role, r) == 0)
                                                    {
                                                        <tr><td><input type="checkbox" id="@item.Role" name="Role" value="@item.Role" checked="checked" />@item.Role</td></tr>
                                                        check = true;
                                                        break;
                                                    }

                                                }
                                                if (!check)
                                                {
                                                    <tr><td><input type="checkbox" id="@item.Role" name="Role" value="@item.Role" />@item.Role</td></tr>
                                                }

                                            }

                                        }
                                    }
                                </table>
                                @*@Html.DropDownList("UserRoles", @ViewBag.GroupID as SelectList, "Select User Group", new { @class = "form-control", id = "UserRoles" })*@
                                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Telephone, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.Telephone, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Telephone, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-4 col-md-8">
                                <input type="submit" value="Update" class="btn btn-success" />
                                <a href="@Url.Action("Index","User")" class="btn btn-danger">Back</a>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-xs-12 col-sm-12">
                        <div class="form-group row">
                            <input type="file" id="signature_file" class="form-control imageBrowes" accept="image/*" />
                            <input type="hidden" class="form-control" name="user_signature" id="file-path" value="@Model.user_signature">
                            <div id="imgPreview" class="thumbnail">
                                @if (String.IsNullOrEmpty(Model.user_signature))
                                {
                                    <img src="@Url.Content("~/Assets/img/profile-picture.jpg")" style=" background-color:white; width: 250px;height: 250px; object-fit:fill;" class="img-responsive" id="targetImg" />
                                }
                                else
                                {
                                    <img src="@Model.user_signature" style=" background-color:white; width: 250px;height: 250px; object-fit:fill;" class="img-responsive" id="targetImg" />

                                }

                            </div>
                        </div>
                    </div>
                </div>     
            </div>
                                        }
    </div>
</div>

@section scripts{
    <script type="text/javascript">
        $(function () {
            $("#signature_file").change(function (e) {
                e.preventDefault();
                readURL(this);
            });
        })
        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#targetImg').attr('src', e.target.result);
                }

                reader.readAsDataURL(input.files[0]); // convert to base64 string

                var data = new FormData;
                data.append("ImageFile", input.files[0]);

                $.ajax({
                    type: "Post",
                    url: "/Account/UploadUserSignature",
                    data: data,
                    contentType: false,
                    processData: false,
                    success: function (imgID) {
                        console.log(imgID);
                        if (imgID != null) {
                            $('#file-path').val(imgID.SignaturePath);
                        }
                    }

                })
            }
        }

        function ClearPreview() {
            $(".imageBrowes").val('');
            $("#description").text('');
            $("#imgPreview").hide();
        }

        function ReadImage(file) {
            var reader = new FileReader;
            var image = new Image;

            reader.readAsDataURL(file);
            reader.onload = function (_file) {
                image.src = _file.target.result;
                image.onload = function () {

                    var height = this.height;
                    var width = this.width;
                    var type = file.type;
                    var size = ~~(file.size / 1048576) + " MB";

                    $("#targetImg").attr('src', _file.target.result);
                    $("#descriptionimage").text("Size:" + size + ", " + height + "X " + width + ", " + type + "");
                    $("#imgPreview").show();
                }
            }
        }
    </script>
    }


